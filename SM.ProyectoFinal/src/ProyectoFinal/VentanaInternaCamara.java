package ProyectoFinal;


import com.github.sarxos.webcam.Webcam;
import com.github.sarxos.webcam.WebcamPanel;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.image.BufferedImage;

/**
 * Clase JInternalFrame que contiene una instancia de la clase Webcam 
 * para mostrar las imágenes tomadas por una Webcam
 * @author Ignacio Yuste López
 */
public class VentanaInternaCamara extends javax.swing.JInternalFrame {

    
    private Webcam camara = null;
    
    /**
     * Creates new form VentanaInternaCamara
     */
    
    private boolean grabar;
    
    /**
     * Constructor privado por si falla el acceso a la Webcam que no se 
     * abra la ventana interna
     * @param grabar indica si la instacia se crea para mostrar vídeo de cámara o solo para hacer una captura
     */
    private VentanaInternaCamara(boolean grabar){
        initComponents();
        
        this.grabar = grabar;
        camara = Webcam.getDefault();
        Dimension resoluciones[] = camara.getViewSizes();
        Dimension maxRes = resoluciones[resoluciones.length - 1];
        camara.setViewSize(maxRes);
        
        if (camara != null) {
            WebcamPanel areaVisual = new WebcamPanel(camara);
            
            if (areaVisual != null) {
                getContentPane().add(areaVisual, BorderLayout.CENTER);
                pack();
            }
        }
    }

    /**
     * Método que devuelve una instancia de la clase
     * @param grabar indica si la instacia se crea para mostrar vídeo de cámara o solo para hacer una captura
     * @return 
     */
    public static VentanaInternaCamara getInstance(boolean grabar){
        
        VentanaInternaCamara v = new VentanaInternaCamara(grabar);
        return (v.camara!=null?v:null);
    }
    
    /**
     * Hace una foto instantánea con la Webcam.
     * Si la instancia se está usando para mostrar el vídeo por pantalla, no cerrar la cámara
     * @return imagen tomada por la webcam
     */
    public BufferedImage getImage(){
        BufferedImage img = camara.getImage();
        if(!grabar) camara.close(); 
        return img;
    }

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosing(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Manejador de evento de cerrar ventana. Cierra la cámara
     * @param evt 
     */
    private void formInternalFrameClosing(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosing
        if(camara!=null){
            camara.close();
            camara = null;
        }
    }//GEN-LAST:event_formInternalFrameClosing


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
